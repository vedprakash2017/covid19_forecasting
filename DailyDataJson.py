def dd():
    # -*- coding: utf-8 -*-
    """DailyDataJson.ipynb

    Automatically generated by Colaboratory.

    Original file is located at
        https://colab.research.google.com/drive/1lZ5CCUT5ZpQXpYQCjaAY947Hzw4Zyfsj
    """

    # Importing libraries

    import pandas as pd
    import numpy as np
    from datetime import datetime
    import warnings
    warnings.filterwarnings("ignore")

    # Fetching the state wise historical infection data

    json_df = pd.read_json('https://api.covid19india.org/states_daily.json')
    state_codes = [*json_df['states_daily'][0].keys()]
    state_codes.remove('status')
    state_codes.remove('date')
    data = pd.DataFrame(columns=['active','confirmed','recovered','deceased', 'cum_active', 'cum_confirmed','cum_recovered','cum_deceased','date','state_code'])
    for state_code in state_codes:
        cum_conf = 0
        cum_active = 0
        cum_rec = 0
        cum_dec = 0
        for j in [*json_df.index]:
            if(j%3==0):
                if(json_df['states_daily'][j][state_code]):
                    confirmed = int(json_df['states_daily'][j][state_code])
                    cum_conf+=confirmed
                else:
                    confirmed = 0
            elif(j%3==1):
                recovered = int(json_df['states_daily'][j][state_code])
                cum_rec += recovered
            elif(j%3==2):
                deceased = int(json_df['states_daily'][j][state_code])
                cum_dec += deceased
                active = confirmed - recovered - deceased
                cum_active += active
                date = datetime.strftime(datetime.strptime(json_df['states_daily'][j]['date'], '%d-%b-%y'), '%Y-%m-%d')
                sc = state_code
                a = [active, confirmed, recovered, deceased, cum_active, cum_conf, cum_rec, cum_dec, date, sc]
                data = data.append(dict(zip(data.columns, a)), ignore_index=True)
    json_df = pd.read_json('https://api.covid19india.org/state_district_wise.json')
    state_code_df = pd.DataFrame(columns=['state','state_code'])
    for column in json_df.columns:
        s = column
        sc = json_df[column]['statecode'].lower()
        row = [s, sc]
        state_code_df = state_code_df.append(dict(zip(state_code_df.columns, row)), ignore_index=True)
    state_code_df = state_code_df.append(dict(zip(state_code_df.columns, ['Daman and Diu', 'dd'])), ignore_index=True)
    state_code_df = state_code_df.append(dict(zip(state_code_df.columns, ['Total', 'tt'])), ignore_index=True)
    data = data.merge(state_code_df, how='left').drop_duplicates()
    data.loc[data.index,'cum_recovered'] = data['cum_recovered'] + data['cum_deceased']
    data = data[data['date'] >= '2020-04-10']

    # Fetching state wise testing data

    json_df = pd.read_json('https://api.covid19india.org/state_test_data.json')
    state_test_data = pd.DataFrame()
    for j in json_df.index:
        dictionary = json_df['states_tested_data'][j]
        df = pd.DataFrame(dictionary, index=[j])
        state_test_data = pd.concat([state_test_data, df])

    state_testing_data = state_test_data[['state','totaltested','updatedon']].drop_duplicates().dropna(how='any',axis=0)
    state_testing_data= state_testing_data[state_testing_data['totaltested']!='']
    state_testing_data= state_testing_data.reset_index().drop(['index'], axis = 1)
    state_testing_data = state_testing_data.rename(columns={"updatedon":"date"})
    state_testing_data.loc[state_testing_data.index,'date'] = state_testing_data.apply(lambda x: datetime.strftime(datetime.strptime(x['date'], '%d/%m/%Y'), '%Y-%m-%d'), axis=1)
    state_testing_data.loc[state_testing_data.index,'totaltested'] = (state_testing_data['totaltested']).astype(int)

    data = pd.merge(data, state_testing_data, on=['state','date'], how='left')

    tableData = data[data['date'] == data['date'].max()]
    tableData = tableData[['state','cum_confirmed','cum_active','cum_recovered']]
    tableData = tableData.sort_values(by=['cum_confirmed'], ascending=False)

    #-- For thousand seperation
    tableData.loc[tableData.index,'cum_confirmed'] = tableData['cum_confirmed'].apply(lambda x : "{:,}".format(int(x)))
    tableData.loc[tableData.index,'cum_active'] = tableData['cum_active'].apply(lambda x : "{:,}".format(int(x)))
    tableData.loc[tableData.index,'cum_recovered'] = tableData['cum_recovered'].apply(lambda x : "{:,}".format(int(x)))
    #--

    TotalData = tableData[tableData['state'] == 'Total']
    TotalData.to_json('TotalData.json',orient='records')

    tableData = tableData[tableData['state'] != 'Total']
    tableData.to_json('tableData.json',orient='records')

    GraphData = data[['state','date','cum_confirmed','cum_active','cum_recovered']]

    GraphData = GraphData[GraphData['state'] != 'State Unassigned']

    GraphData.to_json('GraphData.json',orient='records')

